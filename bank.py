import discord;
from token_and_bot import TOKEN,bot; 
import save_load
from discord.ext import commands;
from my_funcs import GetUserfromMention,toInt
import random
import datetime


class Num:
	def __init__(self):
		self.balance = 99
		self.bank = 100
		self.luck = 101
		self.dmg = 102
		self.df = 103
		self.factory = 104
NUM = Num()


class Wallet:
	def __init__(self,_id:int):
		self._id = _id;
		self.balance = int(save_load.read(_id,"$", 1))
		self.bank = int(save_load.read(_id,"bank", 100))
		self.luck = int(save_load.read(_id,"luck", 0))
		self.dmg = int(save_load.read(_id,"dmg", 0))
		self.df = int(save_load.read(_id,"df", 0))
		self.factory = int(save_load.read(_id,"factory", 0))
		print(self._id," $:",self.balance,"B:",self.bank)
	def __str__(self):
		return f'üß±–ë–∞–ª–∞–Ω—Å: **{self.balance}**üß± \nüè¶–ë–∞–Ω–∫: **{self.bank}**üß± \nüè≠–ó–∞–≤–æ–¥–æ–≤ **{self.factory}** —à—Ç—É–∫'
	def get(self,what:int)->int:
		if what == NUM.balance:
			return self.balance;
		elif what == NUM.bank:
			return self.bank;
		elif what == NUM.luck:
			return self.luck;
		elif what == NUM.dmg:
			return self.dmg;
		elif what == NUM.df:
			return self.df;
		elif what == NUM.factory:
			return self.factory;
		else:
			return self._id;
	def set(self,what:int,value:int):
		if what == NUM.balance:
			self.balance += value;
		elif what == NUM.bank:
			self.bank += value;
		elif what == NUM.luck:
			self.luck += value;
		elif what == NUM.dmg:
			self.dmg += value;
		elif what == NUM.df:
			self.df += value;
		elif what == NUM.factory:
			self.factory += value;
		self.update()
	def check_balance(self)->int:
		print(self.balance)
		return self.balance;
	def check_bank(self)->int:
		print(self.bank)
		return self.bank;
	def give(self,summa:int)->int:
		self.balance += summa;
		self.update();
		return summa;
	def update(self):
		save_load.write(self._id,"$",self.balance);
		save_load.write(self._id,"bank",self.bank);
		save_load.write(self._id,"luck",self.luck);
		save_load.write(self._id,"dmg",self.dmg);
		save_load.write(self._id,"df",self.df);
		save_load.write(self._id,"factory",self.factory);
	def banking(self,summa:int)->int:
		#—Å–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–∏–¥–∞–µ—Ç –µ–µ –≤ –±–∞–Ω–∫
		if summa>0:
			if self.balance >= summa:
				self.balance -= summa;
				self.bank += summa;
				self.update();
				return summa;
			else:
				i = self.balance;
				self.bank += i;
				self.balance = 0;
				self.update();
				return i;
		else:
			summa = abs(summa)
			if self.bank >= summa:
				self.bank -= summa;
				self.balance += summa;
				self.update();
				return summa;
			else:
				i = bank;
				self.balance += i;
				self.bank = 0;
				self.update();
				return i;
	def transfer(self,who,summa:int)->int:
		#–ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å–≥–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫ who –≤ –Ω–∞—à
		if summa >= 0:
			if who.balance > summa:
				who.balance -= summa;
				self.balance += summa;
				self.update();
				who.update();
				return summa;
			else:
				i = who.balance
				who.balance = 0;
				self.balance += i;
				self.update();
				who.update();
				return i;
		else:
			summa = abs(summa)
			who.thansfer(self,summa)


async def mes_reward(ctx):
	W = Wallet(ctx.author.id);
	mes_len = min(300,len(ctx.content))
	print(mes_len)
	summa = random.randint(1,int(mes_len)+1) * 2
	W.give(summa);
	print("–≤—ã –ø–æ–ª—É—á–∏–ª–∏ " + str(summa) + " üß±")


@commands.cooldown(1, 12*3600, commands.BucketType.user)
@bot.command(name = "–Ω–∞–≥—Ä–∞–¥–∞",aliases=["–¥—ç–π–ª–∏–∫","–∑–∞–≤–æ–¥"])
async def daily(ctx):
	W = Wallet(ctx.author.id)
	summa = random.randint(25,250);
	W.give(summa);
	mes += ("–≤—ã –ø–æ–ª—É—á–∏–ª–∏ " + str(summa) + "üß± –æ—Ç –∫–∏—Ä–ø–∏—á–Ω–æ–≥–æ –±–æ–≥–∞")
	Zavod = W.get(NUM.factory)
	if Zavod > 0:
		summa = 0;
		for i in range(0,Zavod):
			summa += random.randint(50,75)*Zavod
		mes += f"\n–≤—ã –ø–æ–ª—É—á–∏–ª–∏ {summa}üß± —Å {Zavod} –∑–∞–≤–æ–¥–æ–≤"
		W.give(summa)
	ctx.reply(mes)
	

@bot.command(name = "–ø–µ—Ä–µ–≤–æ–¥",aliases=["–°–ë–ü","c–±–ø","–°–ü–ë","—Å–ø–±"])
async def trans(ctx,member,summa = 1,*,reason = ''):

	try:
		print('skwasfkfffd')
		Umember = GetUserfromMention(member).id;
		thief = Wallet(ctx.author.id);
		victim = Wallet(Umember);
		mes = "eror"
		print('skwasfkfffd')
		if summa > 0:
			print('skwasfkfffd')
			summa *= -1;
			final_summa = thief.transfer(victim,summa)
			if final_summa > 0:
				mes = "–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ " + str(final_summa) + " üß± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + str(member) + " " + reason;
			else:
				mes = "–î–µ–Ω–µ–≥ –Ω–µ—Ç, –Ω–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å"
		else:
			print('penis')
			mes = "–Ω–∞–∫–∏–¥–∞–ª —Ç–µ–±–µ –∑–∞ —â–µ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–π"
			m_member = ctx.guild.get_member(ctx.author.id)
			time = (datetime.timedelta(seconds=60))
			await m_member.timeout(time, reason="–ø–∏–¥–æ—Ä")
		await ctx.reply(mes);
	except Exception as ER:
		print(ER)

@bot.command(name = "–∫—É–ø–∏—Ç—å",aliases=["–ø–æ–∫—É–ø–∫–∞","–º–∞–≥–∞–∑–∏–Ω"])
async def shop(ctx,who = None,value = 1):
	if who == None:
		ctx.reply("–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–æ–¥ –∑–∞ 500üß±\n –ø—Ä–æ–ø–∏—à–∏—Ç–µ ?–∫—É–ø–∏—Ç—å –∑–∞–≤–æ–¥")
	elif who == "–∑–∞–≤–æ–¥" or who == "–∑" or who == "–∫–∏—Ä–ø–∏—á–Ω—ã–π –∑–∞–≤–æ–¥":
		W = Wallet(ctx.author.id)
		if W.check_balance() >= 500:
			W.transfer(800598406149701634,-500);
			W.set(NUM.factory,1);
			mes = "–≤—ã —Ç–µ–ø–µ—Ä—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –æ–±–ª–∞–¥–∞—Ç–µ–ª—å –∑–∞–≤–æ–¥–∞"
		else:
			mes = "–¥–µ–Ω–µ–≥ –Ω–µ—Ç –Ω–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å"
	ctx.reply(mes)


@bot.command(name = "–±–∞–ª–∞–Ω—Å",aliases=["–±–∞–ª","—Å—á–µ—Ç"])
async def my_bal(ctx,who = None):
	try:
		i = 0;
		mes = ""
		print("–±–∞–ª–∞–Ω—Å –≤–æ—Ä–∫–∏–Ω–≥")
		if who == None:
			i = Wallet(ctx.author.id)
			User = ctx.author.mention;
		else:
			i = Wallet(GetUserfromMention(who).id);
			User = who;
		mes = "**–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** " + User + ":" + '\n' + str(i)
		await ctx.reply(mes)
	except:
		mes = "–û—à–∏–±–∫–∞" + '\n' + "–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç—å —Ç–∞–∫" + '\n' + "?–±–∞–ª–∞–Ω—Å @–∫—Ç–æ-–Ω–∏–±—É–¥—å";
		await ctx.reply(mes)


@bot.command(name = "–±–∞–Ω–∫",aliases=["–≤–∫–ª–∞–¥","–≤—ã–≤–æ–¥"])
async def bank(ctx,summa = "–≤—Å–µ"):
	print("bank")
	W = Wallet(ctx.author.id)
	if summa == "–≤—Å–µ":
		summa = W.check_balance();
	try:
		summa = int(summa)
		print("bank2")
		final_summa = W.banking(summa)
		if summa>0:
			mes = "–≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ " + str(final_summa) + " üß± –≤ –±–∞–Ω–∫" 
		else:
			mes = "–≤—ã —Å–Ω—è–ª–∏ " + str(final_summa) + " üß±" 
		await ctx.reply(mes);
	except Exception as err:
		print(err)
		await ctx.reply("—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")


@bot.command(name ="—Ç–æ–ø", aliases=["–ª–∏–¥–µ—Ä—ã","–¢–æ–ø","–¢–û–ü","–õ–∏–¥–µ—Ä—ã"]) 
async def top(ctx): 
	await ctx.send("ok")
	guild = ctx.message.guild
	mes = "**–ö–ò–†–ü–ò–ß–ù–´–ï –ú–ê–ì–ù–ê–¢–´:**" + '\n'
	my_dict = {}
	for member in guild.members:
		W = Wallet(member.id)
		if not (W.check_balance() == 1 and W.check_bank() == 100) and not (member.id == 800598406149701634):
			value = W.check_balance() + W.check_bank();
			user = member;
			my_dict[user] = value;
	sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1],reverse=True))
	count = 0
	for i in sorted_dict:
		count+=1
		name = i.display_name
		mes +="**#" + str(count) + "**: " + str(name) + ": " + str(sorted_dict[i]) + "üß±"+ '\n';	
	await ctx.reply(mes)



print("bank.py work")
